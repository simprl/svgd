name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    if: "!startsWith(github.event.head_commit.message, '[RELEASE]')"
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: '${{ secrets.PAT_TOKEN }}'

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      # Install dependencies
      - name: Install dependencies
        run: npm i

      # Filter changed paths using dorny/paths-filter
      - name: Filter changed paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            codools:
              - 'packages/codools/**'
            core:
              - 'packages/core/**'
              - 'packages/codools/**'
            utils:
              - 'packages/utils/**'
              - 'packages/core/**'
              - 'packages/codools/**'
            cli:
              - 'packages/cli/**'
              - 'packages/utils/**'
              - 'packages/core/**'
              - 'packages/codools/**'

      - name: codools
        run: |
          if [ "${{ steps.filter.outputs.codools }}" = "true" ]; then
            npm --workspace=packages/codools run build
            npm --workspace=packages/codools run test
            npm --workspace=packages/codools version patch --no-git-tag-version
          else
            npm --workspace=packages/codools run build
          fi

      - name: core
        run: |
          if [ "${{ steps.filter.outputs.core }}" = "true" ]; then
            npm --workspace=packages/core i codools@latest
            npm --workspace=packages/core run build
            npm --workspace=packages/core run test
            npm --workspace=packages/core version patch --no-git-tag-version
          else
            npm --workspace=packages/core run build
          fi

      - name: utils
        run: |
          if [ "${{ steps.filter.outputs.utils }}" = "true" ]; then
            npm --workspace=packages/utils i codools@latest
            npm --workspace=packages/utils i @svgd/core@latest
            npm --workspace=packages/utils run build
            npm --workspace=packages/utils run test
            npm --workspace=packages/utils version patch --no-git-tag-version
          else
            npm --workspace=packages/utils run build
          fi

      - name: cli
        run: |
          if [ "${{ steps.filter.outputs.cli }}" = "true" ]; then
            npm --workspace=packages/cli i codools@latest
            npm --workspace=packages/cli i @svgd/utils@latest
            npm --workspace=packages/cli run build
            npm --workspace=packages/cli run test
            npm --workspace=packages/cli version patch --no-git-tag-version
          else
            npm --workspace=packages/cli run build
          fi

      # Always bump version for the root module
      - name: Bump version for root
        run: npm version patch --no-git-tag-version

      # Commit all changes in a single commit with a message containing the new version
      - name: Commit changes
        run: |
          git config user.name "${{ secrets.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"
          NEW_VERSION=$(node -p "require('./package.json').version")
          git add .
          git commit -m "[RELEASE] ${NEW_VERSION}"
          git push

      # Publish changed workspaces (the root module is not published)
      - name: Publish codools
        if: steps.filter.outputs.codools == 'true'
        run: npm publish --workspace=packages/codools
        env:
          NODE_AUTH_TOKEN: ${{ secrets.MAIN_NPM_TOKEN }}

      - name: Publish core
        if: steps.filter.outputs.core == 'true'
        run: npm publish --workspace=packages/core
        env:
          NODE_AUTH_TOKEN: ${{ secrets.SVGD_NPM_TOKEN }}

      - name: Publish utils
        if: steps.filter.outputs.utils == 'true'
        run: npm publish --workspace=packages/utils --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.SVGD_NPM_TOKEN }}

      - name: Publish cli
        if: steps.filter.outputs.cli == 'true'
        run: npm publish --workspace=packages/cli --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.SVGD_NPM_TOKEN }}
